<?php
/**
 * @copyright 2014 City of Bloomington, Indiana
 * @license http://www.gnu.org/licenses/agpl.txt GNU/AGPL, see LICENSE.txt
 * @author Cliff Ingham <inghamn@bloomington.in.gov>
 *
 * This module is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This module is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
function mediamanager_admin_form()
{
	return system_settings_form([
		'mediamanager_url'=>[
			'#type'          => 'textfield',
			'#default_value' => variable_get('mediamanager_url'),
			'#title'         => 'Media Manager URL',
			'#description'   => 'The url of your installed Media Manager web application',
			'#required'      => true
		]
	]);
}

/**
 * Verifies the connection to Media Manager
 *
 * @implements hook_admin_validate()
 */
function mediamanager_admin_form_validate($form, &$form_state)
{
	// Make sure we can get back the media sizes
	$sizes = _mediamanager_sizes();
	if (!count($sizes)) {
		form_set_error('mediamanager_url', 'Cannot connect to Media Manager URL.  Make sure the URL is valid.');
	}
}

function mediamanager_menu()
{
	return [
		'admin/config/services/mediamanager' => [
			'title'           => 'Media manager settings',
			'description'     => 'Settings for the Media Manager module',
			'page callback'   => 'drupal_get_form',
			'page arguments'  => ['mediamanager_admin_form'],
			'access arguments'=> ['administer site configuration'],
			'type'            => MENU_NORMAL_ITEM
		]
	];
}

function mediamanager_field_info()
{
	return [
		'mediamanager' => [
			'label'            => t('Media Manager'),
			'description'      => t('Media from external manager'),
			'default_widget'   => 'mediamanager_mediaChooser',
			'default_formatter'=> 'mediamanager_mediaFormatter'
		]
	];
}

function mediamanager_field_widget_info()
{
	return [
		'mediamanager_mediaChooser' => [
			'label'         => t('External media'),
			'field types'   => ['mediamanager']
		]
	];
}

function mediamanager_field_widget_form(&$form, &$form_state, &$field, &$instance, &$langcode, &$items, &$delta, &$element)
{
	if ($instance['widget']['type'] == 'mediamanager_mediaChooser') {
		$url = variable_get('mediamanager_url');
		// If the field is set to display at a certain size,
		// look up the aspect ratio for that size, and add the parameters
		// to the mediamanager url.
		if (!empty($instance['display']['default']['settings']['size'])) {
			$s =   $instance['display']['default']['settings']['size'];

			$sizes = _mediamanager_sizes();
			if (isset( $sizes->$s->aspectRatio)) {
				$ar = &$sizes->$s->aspectRatio;

				if (!empty($ar->width) && !empty($ar->height)) {
					$url.= '?aspectRatio_width=' .$ar->width;
					$url.= ';aspectRatio_height='.$ar->height;
				}
			}
		}

		$element['media_id'] = [
            '#type'          => 'textfield',
            '#title'         => isset($instance['label']) ? $instance['label'] : 'Media ID',
            '#default_value' => isset($items[$delta])     ? $items[$delta]     : null,
            '#field_suffix'  => l('Media Manager', $url, ['attributes'=>['target'=>'_blank']]),
            '#description'   => !empty($instance['description']) ? $instance['description'] : null
		];
	}
	return $element;
}

/**
 * Validate user entered media_id
 *
 * Users can enter ID in various ways:
 * int:       22
 * hex:       530778b93e0bf
 * media URL: http://localhost/media-manager/media/view?media_id=3
 * image url: http://localhost/media-manager/m/2014/2/21/350/530778b93e0bf.png
 *
 * @implements hook_field_validate()
 */
function mediamanager_field_validate($entity_type, $entity, $field, $instance, $lang, &$items, &$errors)
{
	foreach ($items as $delta=>$item) {
		if (!empty($item['media_id'])) {
			$id = _mediamanager_get_valid_id($item['media_id']);
			if (!$id) {
				$errors[$field['field_name']][$lang][$delta][] = [
					'error'   => 'unknownMedia',
					'message' => "The $instance[label] you provided is not a valid id"
				];
			}
			// Make sure the media the user chose meets the requirements
			// for the display settings on this field
			else {
				$derivative  = _mediamanager_display_size($instance);
				if ($derivative) {
					$media   = _mediamanager_media_info($id);
					// Make sure the image is big enough
					if ($media->width < $derivative->size && $media->height < $derivative->size) {
						$errors[$field['field_name']][$lang][$delta][] = [
							'error'   => 'mediaTooSmall',
							'message' => "The $instance[label] you provided is too small"
						];
					}
					// Check the aspect ratio
					if (isset( $derivative->aspectRatio)) {
						$ar = &$derivative->aspectRatio;
						if (!empty($ar->width) && !empty($ar->height)
							&& (($media->width / $media->height) != ($ar->width / $ar->height))) {
							$errors[$field['field_name']][$lang][$delta][] = [
								'error'   => 'wrongAspectRatio',
								'message' => "The $instance[label] you provided has the wrong aspect ratio"
							];
						}
					}
				}
			}
		}
	}
}

/**
 * Returns the media manger derivative matching Drupal's default display size
 *
 * Each field in Drupal can have a Display setting size.
 * The size setting for the Default view mode is used to request
 * a named derivative from media manager.
 * If media manager has a named derivative matching the size name,
 * the derivative information is returned.
 *
 * @internal
 * @return stdClass
 */
function _mediamanager_display_size(&$instance)
{
	if (!empty($instance['display']['default']['settings']['size'])) {
		$s =   $instance['display']['default']['settings']['size'];

		$sizes = _mediamanager_sizes();
		if (isset($sizes->$s)) { return $sizes->$s;}
	}
}

/**
 * Returns aspectRatio restrictions if they exist
 *
 * A field instance's display settings might call for a given size
 * of derivative from media manager.  The particular derivative
 * might have a specific aspectRatio that's required.
 * If this is the case, the aspectRatio requirements are returned.
 *
 * If no restrictions apply, this function returns null
 *
 * @internal
 * @param array $instance The Drupal instance array
 * @return stdClass
 */
function _mediamanager_aspectRatio_restrictions(&$instance)
{
	if (!empty($instance['display']['default']['settings']['size'])) {
		$s =   $instance['display']['default']['settings']['size'];

		$sizes = _mediamanager_sizes();
		if (isset( $sizes->$s->aspectRatio)) {
			return $sizes->$s->aspectRatio;
		}
	}
}

function mediamanager_field_presave($entity_type, $entity, $field, $instance, $lang, &$items)
{
	foreach ($items as $delta=>$item) {
		if (!empty($item['media_id'])) {
			$items[$delta]['media_id'] = _mediamanager_get_valid_id($item['media_id']);
		}
	}
}

function mediamanager_field_is_empty($item, $field)
{
	if ($field['type'] == 'mediamanager') {
		return empty($item['media_id']);
	}
}

function mediamanager_field_formatter_info()
{
	return [
		'mediamanager_mediaFormatter' => [
			'label'       => t('Default'),
			'field types' => ['mediamanager'],
			'settings'    => ['size'=>'']
		]
	];
}

function mediamanager_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state)
{
	$display = $instance['display'][$view_mode];
	$settings = $display['settings'];

	switch ($display['type']) {
		case 'mediamanager_mediaFormatter':
			$options = [];
			foreach (_mediamanager_sizes() as $name=>$size) {
				$options[$name] = $name;
			}

			$form['size'] = [
				'#title' => '',
				'#type' => 'select',
				'#empty_option' => t('None (original image)'),
				'#default_value' => $settings['size'],
				'#options'=> $options
			];
		break;
	}
	return $form;
}

function mediamanager_field_formatter_settings_summary($field, $instance, $view_mode)
{
	$settings = $instance['display'][$view_mode]['settings'];
	return empty($settings['size']) ? 'Original Image' : 'Media Size: '.$settings['size'];
}

function mediamanager_field_formatter_view($type, $entity, $field, $instance, $lang, $items, $display)
{
	$element = [];

	switch ($display['type']) {
		case 'mediamanager_mediaFormatter':
			$mediamanager_url = variable_get('mediamanager_url');

			foreach ($items as $delta=>$item) {
				$media = _mediamanager_media_info($item['media_id']);
				if ($media) {
					$element[$delta] = [
						'#theme' => 'mediamanager_media',
						'#media' => $media,
						'#size'  => $display['settings']['size']
					];
				}
			}
		break;
	}
	return $element;
}

function mediamanager_theme()
{
	return [
		'mediamanager_media'=>[
			'variables'=>['media'=>null, 'size'=>null]
		]
	];
}

function theme_mediamanager_media($var)
{
	$url = variable_get('mediamanager_url');
	$d = date('Y/n/j', strtotime($var['media']->uploaded));

	if ($var['size']) {
		$json = _mediamanager_sizes();
		$size = $json->$var['size']->size;

		$f = explode('.', $var['media']->internalFilename);
		$var['path'] = "$url/m/$d/$size/$f[0].png";
	}
	else {
		$var['path'] = "$url/m/$d/{$var['media']->internalFilename}";
	}

	return theme('image', $var);
}

/**
 * Queries media manager for all the information about derivatives
 *
 * The response is cached in memory, so subsequent calls
 * to this function do not send out another HTTP request.
 *
 * @return stdClass JSON Response from media manager
 */
function _mediamanager_sizes()
{
	static $response = null;

	if (!$response) {
		$url = variable_get('mediamanager_url').'/derivatives?format=json';
		$response = drupal_http_request($url);
	}
	if (isset($response->data)) {
		return json_decode($response->data);
	}
}

/**
 * Queries media manager for a single item's info
 *
 * The response is cached in memory, so subsequent calls
 * to this function do not send out another HTTP request.
 *
 * @param int|hex $id
 * @return stdClass JSON response from media manager
 */
function _mediamanager_media_info($id)
{
	static $response = [];

	if (empty($response[$id])) {
		$url = variable_get('mediamanager_url')."/media/view?format=json&media_id=$id";
		$response[$id] = drupal_http_request($url);
	}
	if (isset($response[$id]->data)) {
		return json_decode($response[$id]->data);
	}
}

/**
 * Validate user entered value and return media_id
 *
 * Returns null on validation error
 *
 * Users can enter ID in various ways:
 * int:       22
 * hex:       530778b93e0bf
 * media URL: http://localhost/media-manager/media/view?media_id=3
 * image url: http://localhost/media-manager/m/2014/2/21/350/530778b93e0bf.png
 *
 * @param string $id
 * @return int
 */
function _mediamanager_get_valid_id($id)
{
	$id = trim($id);

	if (   preg_match('|media_id=(\d+)|',         $id, $matches)
		|| preg_match('|([0-9a-f]{13})(.\w+)?$|', $id, $matches) ) {
		$id = $matches[1];
	}

	$media = _mediamanager_media_info($id);
	if ($media) {
		return $media->id;
	}
}
